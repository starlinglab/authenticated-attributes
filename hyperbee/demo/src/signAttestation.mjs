import * as fs from "node:fs/promises";

import * as ed from "@noble/ed25519";

import { encodeAttestation } from "./encodeAttestation.mjs";

const signAttestation = async (privKey, rawAttestation) => {
  const pubKey = await ed.getPublicKeyAsync(privKey);
  const rawAttCID = await encodeAttestation(rawAttestation);
  const signature = await ed.signAsync(rawAttCID, privKey);
  return { signature, signedMsg: rawAttCID, pubKey };
};

/**
 * Extracts a 32-byte ed25519 private key from the given PEM/ASN encoded key file,
 * such as those generated by openssl.
 */
const keyFromPem = async (pemPath) => {
  /*
  Adapted from my work in the shell:
  $ cat example.key | sed -n 2p | base64 -d | tail -c 32  # and then base64 again to make it visible

  Where example.key looks like this:
  
  -----BEGIN PRIVATE KEY-----
  MC4CAQAwBQYDK2VwBCIEIMgOprnsIP3GrBs/WsIY3tpMKDCTBdWFZ+UThVF23Zk7
  -----END PRIVATE KEY-----
  */

  const data = await fs.readFile(pemPath, { encoding: "utf8" });
  return Buffer.from(data.split(/\r?\n/)[1], "base64").subarray(-32);
};

export { signAttestation, keyFromPem };
